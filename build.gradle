/*
 * Copyright (c) 2024. MangoRage
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = 'https://s01.oss.sonatype.org/content/repositories/releases/'
        }
        maven {
            url = 'https://repo.mattmalec.com/repository/releases'
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath 'io.github.realmangorage:gradleutils:3.0.2-beta2109'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'gradleutils'

group 'org.mangorage'
version = '10.0.' + getGitVersion()

def getGitVersion() {
    def result = "git rev-list HEAD --count".execute().text.trim()
    if (result.empty) {
        throw new RuntimeException("Failed to retrieve commit count")
    } else {
        def commitCount = result.toInteger()
        // Use the commitCount variable further in your script
        return commitCount;
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

MangoBotConfig {
    disableCopyOverBot()
    setJarTask(jar)
    setReleaseTask(() -> getTasks().getByName("publishMangobotPublicationToMavenRepository"))

    if (System.getenv().containsKey("SERVER_TOKEN") && System.getenv().containsKey("SERVER_ID")) {
        enableRestartServerTask(
                System.getenv("SERVER_ID") as String,
                "https://panel.sodiumhosting.com/",
                System.getenv("SERVER_TOKEN") as String,
                null
        )
    }
}


repositories {
    mavenCentral()
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url = 'https://repo.mattmalec.com/repository/releases'
    }
    maven {
        url = 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    maven {
        url = 'https://repo.spring.io/plugins-release/'
    }
}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

dependencies {
    // For unit tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2' // For JUnit 5
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2' // For JUnit 5

    installer('io.github.realmangorage:installer:2.1.3')
    botInternal(sourceSets.main.output)

    runtimeOnly('org.apache.logging.log4j:log4j-slf4j-impl:2.20.0')

    // Libs for Bot
    library('net.dv8tion:JDA:5.0.0-beta.19')

    library('com.google.code.gson:gson:2.10.1')
    library('org.luaj:luaj-jse:3.0.1')

    library('org.apache.logging.log4j:log4j-core:2.20.0')
    library('org.slf4j:slf4j-simple:2.0.9')

    library('org.reflections:reflections:0.10.2')
    library('org.ow2.asm:asm:9.1')
    library('org.ow2.asm:asm-tree:9.2')
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

jar {
    dependsOn configurations.embedLibrary

    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.embedLibrary.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }

    manifest {
        attributes 'Main-Class': 'org.mangorage.mangobot.loader.Loader'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications.register("mangobot", MavenPublication) {
        artifact jar
        artifact sourcesJar

        pom {
            name = 'MangoBot'
            description = 'A discord bot used for many servers'
            url = 'https://github.com/MangoRageBot/MangoBot'
            issueManagement {
                system = 'github'
                url = 'https://github.com/MangoRageBot/MangoBot/issues'
            }
            developers {
                developer {
                    id = 'mangorage'
                    name = 'MangoRage'
                }
            }
            withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.library.getDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }

    }

    repositories {
        maven {

            url = "https://s01.oss.sonatype.org/content/repositories/releases/"
            group "io.github.realmangorage"

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}