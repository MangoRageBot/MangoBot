import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = 'https://s01.oss.sonatype.org/content/repositories/releases/'
        }
        maven {
            url = 'https://repo.mattmalec.com/repository/releases'
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath files('gradleutils/build/libs/gradleutils-1.0.0-all.jar')
    }
}

def projectRootDir = project.projectDir.toPath()
def getVersionCode = {
    def proc = 'git rev-list --count master'.execute()
    proc.waitFor()
    return proc.text.trim()
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'

Path path = projectRootDir.resolve(Path.of('gradleutils/build/libs/gradleutils-1.0.0-all.jar'))


if (path.toFile().exists()) {
    apply plugin: 'org.mangorage.gradleutils'
} else {
    tasks.register("finishSetup", Exec) {
        description = 'Restart the Gradle daemon'
        group "bot tasks"
        workingDir project.rootDir
        dependsOn(":gradleutils:build")
        mustRunAfter(":gradleutils:build")

        doLast {
            commandLine 'gradlew', '--reload'
        }
    }

}


group 'org.mangorage'
version "${BOT_VERSION}-c" + getVersionCode()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    api.extendsFrom internal
}


repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url = 'https://repo.mattmalec.com/repository/releases'
    }
    maven {
        url = 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    maven {
        url = 'https://repo.spring.io/plugins-release/'
    }
}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

def libs = [
        JDA: 'net.dv8tion:JDA:5.0.0-beta.17',
        LAVA_PLAYER     : 'dev.arbjerg:lavaplayer:2.0.2',
        GSON            : 'com.google.code.gson:gson:2.10.1',
        LOG4J_CORE      : 'org.apache.logging.log4j:log4j-core:2.20.0',
        LOG4J_SLF4J_IMPL: 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0',
        GITHUB_API      : 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5',
        SLF4J_SIMPLE    : 'org.slf4j:slf4j-simple:2.0.9',
        REFLECTIONS: 'org.reflections:reflections:0.10.2',
        LUA_JAVA   : 'org.luaj:luaj-jse:3.0.1',
        ASM        : 'org.ow2.asm:asm:9.1',
        ASM_TREE   : 'org.ow2.asm:asm-tree:9.2'
]


ext.globalLibs = libs

println("Current Bot Version: ${version}")

dependencies {
    runtimeOnly(libs.LOG4J_SLF4J_IMPL)

    // Libs for Bot
    implementation(libs.JDA)
    implementation(libs.LAVA_PLAYER)
    implementation(libs.GSON)
    implementation(libs.LOG4J_CORE)
    implementation(libs.GITHUB_API)
    implementation(libs.SLF4J_SIMPLE)
    implementation(libs.REFLECTIONS)
    implementation(libs.LUA_JAVA)
    implementation(libs.ASM)
    implementation(libs.ASM_TREE)

    // Core Libs
    implementation project(path: ':mangobotapi')
    implementation project(path: ':mboteventbus')
    implementation project(path: ':mangoutils')

    testImplementation project(path: ':mangoutils')

    internal project(path: ':mangobotapi')
    internal project(path: ':mboteventbus')
    internal project(path: ':mangoutils')
}

publish {
    group "bot tasks"
}

jar {
    var task = getTasksByName("runDatagen", false)
    if (task != null) {
        dependsOn task
        mustRunAfter task
    }

    dependsOn configurations.internal

    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.internal.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }

    manifest {
        attributes 'Main-Class': 'org.mangorage.mangobot.loader.Loader'
    }

    doLast {
        Path output = projectRootDir.resolve(Paths.get('build/run/plugins'))
        Files.createDirectories(output)
        copy {
            from jar.outputs
            into output
            rename { 'mangobot.jar' }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            pom {
                name = 'MangoBot'
                description = 'A discord bot used for many servers'
                url = 'https://github.com/RealMangorage/MangoBot/'
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/RealMangorage/MangoBot/issues'
                }
                developers {
                    developer {
                        id = 'mangorage'
                        name = 'MangoRage'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            group "io.github.realmangorage"
            credentials {
                username = findProperty("mango.maven.username")
                password = findProperty("mango.maven.password")
            }
        }
    }
}